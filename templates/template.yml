AWSTemplateFormatVersion: "2010-09-09"

Description: This stack creates a logically-air gapped backup vault and supporting resources, intended to be used for storing copies of backups for all services in a given environment.

Parameters:
  Environment:
    Description: Deployment environment
    Type: String
    AllowedValues:
      - sandbox
      - dev
      - test
      - prod

  OwnerAccountId:
    Description: AWS Account ID of the account that can write to the backup vault
    Type: String
    Default: "750639270376" # FIXME: Account ID of sandbox account, just to test

Transform: AWS::LanguageExtensions

Resources:
  DataBucket:
    Type: AWS::S3::Bucket
    Metadata:
      Comment: !Sub Example bucket for the ${Environment} environment
    Properties:
      BucketName: !Sub ${AWS::StackName}-example-${AWS::AccountId}-${AWS::Region}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: AutoArchive
            Status: Enabled
            Transitions:
              - TransitionInDays: 90
                StorageClass: INTELLIGENT_TIERING

  BackupVault:
    Type: AWS::Backup::LogicallyAirGappedBackupVault
    Properties:
      AccessPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCrossAccountBackup
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${OwnerAccountId}:root
            Action:
              - backup:StartCopyJob
              - backup:GetBackupVaultAccessPolicy
              - backup:GetRecoveryPointRestoreMetadata
              - backup:ListRecoveryPointsByBackupVault
              - backup:CopyIntoBackupVault
            Resource:
              - !Sub arn:aws:backup:${AWS::Region}:${AWS::AccountId}:backup-vault/${AWS::StackName}-*
              - !Sub arn:aws:backup:${AWS::Region}:${AWS::AccountId}:recovery-point/*
      BackupVaultName: !Sub ${AWS::StackName}-backup-vault
      EncryptionKeyArn: STRING
      MaxRetentionDays: 14 # FIXME: Low value for testing, should be a year or more
      MinRetentionDays: 7
      VaultType: LOGICALLY_AIR_GAPPED_BACKUP_VAULT

  BackupVaultShare:
    Type: AWS::RAM::ResourceShare
    Properties:
      AllowExternalPrincipals: false
      Name: !Sub ${AWS::StackName}-backup-vault-share
      PermissionArns:
        - !GetAtt BackupVaultPermission.Arn
      Principals:
        - !Ref OwnerAccountId
      ResourceArns:
        - !GetAtt BackupVault.BackupVaultArn

  BackupVaultPermission:
    Type: AWS::RAM::Permission
    Properties:
      Name: !Sub ${AWS::StackName}-backup-vault-permission-${AWS::AccountId}
      ResourceType: backup:backup-vault
      PolicyTemplate:
        Version: "2012-10-17"
        Statement:
          - Effect: ALLOW
            Action:
              - backup:StartCopyJob
              - backup:GetBackupVaultAccessPolicy
              - backup:GetRecoveryPointRestoreMetadata
              - backup:ListRecoveryPointsByBackupVault
              - backup:CopyIntoBackupVault
            Condition:
              StringEquals:
                aws:PrincipalAccount: !Ref OwnerAccountId

Outputs:
  BucketName:
    Description: Name of the created S3 bucket
    Value: !Ref DataBucket

  BucketArn:
    Description: ARN of the created S3 bucket
    Value: !GetAtt DataBucket.Arn
